#!/usr/local/bin/node

var args = process.argv.join(" ");
if(args.match(/h|help/)) {
  console.log("usage: djsd-node [-vh]");
  console.log("starts dotjs server in the foreground. kill with ^C");
  process.exit();
}

if(process.argv.indexOf("-v") !== -1) {
  console.log("djsd-node 1.1");
  process.exit();
}

var http = require("http");
var https = require("https");
var fs = require("fs");
var path = require("path");

var absolute_path = function(url) {
  return path.resolve(process.cwd, url);
}

var handle_request = function(request, response) {
  var file = absolute_path(request.url.replace(/\//, ''));
  var default_file = absolute_path("default.js");

  response.statusCode = 200;
  var fbase = file.slice(0, file.indexOf("."));
  var fext = file.slice(file.lastIndexOf(".")+1);
  var mime = "text/plain";
  switch (fext) {
    case "js":
      mime = "text/javascript";
      break;
    case "css":
      mime = "text/css";
      break;
  }
  response.setHeader("Content-Type", mime);

  var origin = request.headers["origin"];
  if(origin) {
    response.setHeader("Access-Control-Allow-Origin", origin);
  }

  response.write("// dotjs " + fext + "\n");

  if(fs.existsSync(default_file) && fs.statSync(default_file).isFile()) {
    response.write(fs.readFileSync(default_file) + "\n");
  }

  if(fs.existsSync(file) && fs.statSync(file).isFile()) {
    response.write(fs.readFileSync(file));
  }
  response.end();
};

var ssl_options = {
  key: fs.readFileSync('/Users/mh/repos/mh/osx/ssl/local.key'),
  cert: fs.readFileSync('/Users/mh/repos/mh/osx/ssl/local.crt')
};

var server_https = https.createServer(ssl_options, handle_request);
server_https.listen(3132);

var server_http = http.createServer(handle_request);
server_http.listen(3131);
